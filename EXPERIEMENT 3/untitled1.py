# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XiRHoUR0nVp8gcFc8aFD4I2f5mZ1sIJX
"""

pip install numpy pandas matplotlib scikit-learn seaborn

import pandas as pd

# Load dataset
df = pd.read_csv("stock_data.csv", parse_dates=["Date"])
df = df.sort_values(by="Date")  # Ensure data is sorted by date
df["Days"] = (df["Date"] - df["Date"].min()).dt.days  # Convert dates to numerical values

print(df.head())  # View first few rows

from google.colab import files
uploaded = files.upload()

import pandas as pd

# Load dataset
df = pd.read_csv("stock_data.csv", parse_dates=["Date"])

# Display the first few rows
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Plot stock prices over time
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 5))
plt.plot(df["Date"], df["Price"], label="Stock Price", color="blue")
plt.xlabel("Date")
plt.ylabel("Stock Price")
plt.title("Stock Price Over Time")
plt.legend()
plt.show()

df = df.sort_values(by="Date")  # Ensure data is sorted by date
df["Days"] = (df["Date"] - df["Date"].min()).dt.days  # Convert dates to numerical values

# Define features (X) and target (y)
X = df[["Days"]]
y = df["Price"]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

# Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Display model coefficients
print(f"Intercept: {model.intercept_}")
print(f"Slope: {model.coef_[0]}")

from sklearn.metrics import mean_absolute_error, mean_squared_error

# Make predictions
y_pred = model.predict(X_test)

# Calculate error metrics
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

print(f"Mean Absolute Error: {mae:.2f}")
print(f"Mean Squared Error: {mse:.2f}")

plt.figure(figsize=(10, 5))
plt.scatter(df["Date"], df["Price"], label="Actual Prices", color="blue")
plt.plot(df["Date"], model.predict(X), label="Predicted Prices", color="red", linewidth=2)
plt.xlabel("Date")
plt.ylabel("Stock Price")
plt.title("Stock Price Prediction Using Linear Regression")
plt.legend()
plt.show()

import numpy as np

# Create future dates
future_days = np.arange(df["Days"].max() + 1, df["Days"].max() + 31).reshape(-1, 1)

# Predict future stock prices
future_prices = model.predict(future_days)

# Create a DataFrame for predictions
future_dates = pd.date_range(start=df["Date"].max() + pd.Timedelta(days=1), periods=30, freq="D")
future_df = pd.DataFrame({"Date": future_dates, "Predicted_Price": future_prices})

# Plot future predictions
plt.figure(figsize=(10, 5))
plt.plot(df["Date"], df["Price"], label="Historical Prices", color="blue")
plt.plot(future_df["Date"], future_df["Predicted_Price"], label="Future Predictions", color="green", linestyle="dashed")
plt.xlabel("Date")
plt.ylabel("Stock Price")
plt.title("Stock Price Prediction for Next 30 Days")
plt.legend()
plt.show()

# Print future predictions
print(future_df.head(10))  # Show first 10 predictions



